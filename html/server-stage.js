const fs = require('fs');
const path = require('path');
const LRUCache = require('lru-cache');

const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');

const favicon = require('serve-favicon');
const compression = require('compression');
const microcache = require('route-cache');
const expressVersion = require('express/package.json').version;
const serverRendererVersion = require('vue-server-renderer/package.json').version;
const { createBundleRenderer } = require('./build/custom-vue-server-renderer');

const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo = `express/${expressVersion} vue-server-renderer/${serverRendererVersion}`;
const ServerLogger = require('./src/services/LogService/ServerLogger');

const logger = new ServerLogger();

const app = express();
const sites_folder = path.resolve(__dirname, '../../');
const port = 3000;

if (serverRendererVersion !== '2.6.10')
    logger.warn(
        'В файле custom-vue-server-renderer изменен порядок применения тегов стилей для <link> и <style> в методе renderStyles. Необходимо обновить код в файле custom-vue-server-renderer, ибо версия vue-server-renderer изменилась и надо добавить правки'
    );

function createRenderer(bundle, options) {
    // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer

    return createBundleRenderer(
        bundle,
        Object.assign(options, {
            // for component caching
            cache: new LRUCache({
                max: 1000,
                maxAge: 1000 * 60 * 15,
            }),
            // this is only needed when vue-server-renderer is npm-linked
            basedir: path.resolve(__dirname),
            // recommended for performance
            runInNewContext: false,
        })
    );
}

function resolve(file) {
    return path.resolve(__dirname, file);
}

function serve(servePath, cache) {
    return express.static(resolve(servePath), {
        maxAge: cache ? 1000 * 60 * 60 * 24 * 365 : 0,
    });
}

app.enable('trust proxy');
app.use(cors({ credentials: true }));
app.use(cookieParser());
app.use(compression({ threshold: 0 }));
app.use(favicon('../public/assets/favicon.ico'));
app.use('/', serve('../public', true));
app.use('/manifest.json', serve('../public/assets/manifest.json', true));
app.use('/service-worker.js', serve('../public/assets/service-worker.js'));

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
// app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));

function render(req, res) {
    try {
        let app_root = null;
        const matches = /([^.]+)-front\.ibt-mas\.greensight\.ru/.exec(req.hostname);
        if (!matches || typeof matches[1] === 'undefined') throw new Error('Hostname is not matches by regex');
        app_root = path.resolve(sites_folder, `${matches[1]}-front.ibt-mas.greensight.ru`);

        res.setHeader('Content-Type', 'text/html');
        res.setHeader('Server', serverInfo);

        const handleError = err => {
            if (err.url) {
                res.redirect(err.url);
                logger.warn(`redirect: ${err.url}`);
            } else if (err.code === 404) {
                res.status(404).send('404 | Page Not Found');
                logger.warn(`page not found: ${req.url}`);
            } else {
                // Render Error Page or Redirect
                res.status(500).send('500 | Internal Server Error');
                logger.error(`error during render: ${req.url}`, err.stack);
            }
        };

        // const env = JSON.parse(fs.readFileSync(path.resolve(app_root, '.env.json')).toString());

        const context = {
            title: 'IBT',
            url: req.url,
            req,
            res,
            // env,
        };

        // In production: create server renderer using template and built server bundle.
        // The server bundle is generated by vue-ssr-webpack-plugin.
        // The client manifests are optional, but it allows the renderer
        // to automatically infer preload/prefetch links and directly add <script>
        // tags for any async chunks used during render, avoiding waterfall requests.

        const bundle_path = path.resolve(app_root, 'public/assets/vue-ssr-server-bundle.json');
        const manifest_path = path.resolve(app_root, 'public/assets/vue-ssr-client-manifest.json');
        const template_path = path.resolve(app_root, 'html/src/index.template.html');

        const clientManifest = JSON.parse(fs.readFileSync(manifest_path).toString());
        const bundle = JSON.parse(fs.readFileSync(bundle_path).toString());
        const template = fs.readFileSync(template_path, 'utf-8');

        const renderer = createRenderer(bundle, {
            template,
            clientManifest,
            inject: false,
            shouldPreload(file, type) {
                // type is inferred based on the file extension.
                // https://fetch.spec.whatwg.org/#concept-request-destination
                if (type === 'script' || type === 'style') return true;
                if (type === 'font') return /\.woff2$/.test(file);
                return false;
            },
        });

        renderer.renderToString(context, (err, html) => {
            if (err) return handleError(err);
            res.send(html);
        });
    } catch (error) {
        logger.error(error);
    }
}

app.get('*', render);

app.listen(port, () => {
    logger.info(`server started at port ${port}`);
});

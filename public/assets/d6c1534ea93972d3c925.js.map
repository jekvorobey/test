{"version":3,"sources":["webpack:///./src/views/ItemList/CreateListView.js","webpack:///./src/api/index.js","webpack:///./src/api/create-api-client.js","webpack:///./src/store/modules/ItemList/actions.js","webpack:///./src/store/modules/ItemList/mutations.js","webpack:///./src/store/modules/ItemList/getters.js","webpack:///./src/store/modules/ItemList/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","createListView","_store_modules_ItemList__WEBPACK_IMPORTED_MODULE_0__","_services_ServiceLocator__WEBPACK_IMPORTED_MODULE_1__","_services_ServiceLocator__WEBPACK_IMPORTED_MODULE_1___default","n","ItemList","e","then","bind","camelize","str","charAt","toUpperCase","slice","type","name","concat","serverPrefetch","this","$store","registerModule","itemListModule","dispatch","beforeRouteEnter","to","from","next","store","ServiceLocator","progress","$progress","_modulesNamespaceMap","preserveState","state","item_list","start","finish","title","render","h","props","process","fetchIdsByType","fetchItems","fetchUser","watchList","create_api__WEBPACK_IMPORTED_MODULE_0__","logger","$logger","logRequests","env","DEBUG_API","api","createAPI","version","config","databaseURL","fetch","child","info","cache","cachedItems","has","Promise","resolve","get","reject","once","snapshot","val","__lastUpdated","Date","now","set","cachedIds","ids","all","map","id","fetchItem","cb","first","ref","handler","on","off","onServer","warmCache","top","setTimeout","firebase_app__WEBPACK_IMPORTED_MODULE_0__","firebase_app__WEBPACK_IMPORTED_MODULE_0___default","_ref","Firebase","initializeApp","database","actions","FETCH_LIST_DATA","_ref2","commit","ENSURE_ACTIVE_ITEMS","_ref3","getters","activeIds","FETCH_ITEMS","_ref4","_ref5","filter","item","items","length","FETCH_USER","_ref6","_ref7","users","user","SET_USER","_ref8","_ref9","mutations","SET_ACTIVE_TYPE","activeType","SET_LIST","lists","SET_ITEMS","forEach","Vue","rootState","itemsPerPage","page","Number","route","params","end","activeItems","_","namespaced","new","show","ask","job"],"mappings":"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","file":"d6c1534ea93972d3c925.js","sourcesContent":["import itemListModule from '../../store/modules/ItemList';\nimport ServiceLocator from '../../services/ServiceLocator';\n\nconst ItemList = () => import(/* webpackChunkName: \"item-list\" */ './ItemList.vue');\n\nconst camelize = str => str.charAt(0).toUpperCase() + str.slice(1);\n\n// This is a factory function for dynamically creating root-level list views,\n// since they share most of the logic except for the type of items to display.\n// They are essentially higher order components wrapping ItemList.vue.\nexport default function createListView(type) {\n    return {\n        name: `${type}-stories-view`,\n\n        // Server-side only\n        // This will be called by the server renderer automatically\n        serverPrefetch() {\n            // return the Promise from the action\n            // so that the component waits before rendering\n            this.$store.registerModule('item_list', itemListModule);\n            return this.$store.dispatch('item_list/FETCH_LIST_DATA', { type });\n        },\n\n        beforeRouteEnter(to, from, next) {\n            // вызывается до подтверждения пути, соответствующего этому компоненту.\n            // НЕ ИМЕЕТ доступа к контексту экземпляра компонента `this`,\n            // так как к моменту вызова экземпляр ещё не создан!\n\n            if (process.env.VUE_ENV === 'server') {\n                next();\n                return;\n            }\n\n            const store = ServiceLocator.$store();\n            const progress = ServiceLocator.$progress();\n            const register = !!store._modulesNamespaceMap[`${itemListModule.name}/`];\n            if (!register) {\n                store.registerModule(itemListModule.name, itemListModule, {\n                    preserveState: !!store.state.item_list,\n                });\n            }\n\n            progress.start();\n            store.dispatch('item_list/FETCH_LIST_DATA', { type }).then(() => {\n                progress.finish();\n                next();\n            });\n        },\n\n        title: camelize(type),\n\n        render(h) {\n            return h(ItemList, { props: { type } });\n        },\n    };\n}\n","// this is aliased in webpack config based on server/client build\n// eslint-disable-next-line\nimport createAPI from 'create-api';\nimport ServiceLocator from '../services/ServiceLocator';\n\nconst logger = ServiceLocator.$logger();\nconst logRequests = !!process.env.DEBUG_API;\n\nconst api = createAPI({\n    version: '/v0',\n    config: {\n        databaseURL: 'https://hacker-news.firebaseio.com',\n    },\n});\n\n// warm the front page cache every 15 min\n// make sure to do this only once across all requests\nif (api.onServer) {\n    warmCache();\n}\n\nfunction warmCache() {\n    fetchItems((api.cachedIds.top || []).slice(0, 30));\n    setTimeout(warmCache, 1000 * 60 * 15);\n}\n\nfunction fetch(child) {\n    if (logRequests) logger.info(`fetching ${child}...`);\n    const cache = api.cachedItems;\n    if (cache && cache.has(child)) {\n        if (logRequests) logger.info(`cache hit for ${child}.`);\n        return Promise.resolve(cache.get(child));\n    }\n    return new Promise((resolve, reject) => {\n        api.child(child).once(\n            'value',\n            snapshot => {\n                const val = snapshot.val();\n                // mark the timestamp when this item is cached\n                if (val) val.__lastUpdated = Date.now();\n                if (cache) cache.set(child, val);\n                if (logRequests) logger.info(`fetched ${child}.`);\n                resolve(val);\n            },\n            reject\n        );\n    });\n}\n\nexport function fetchIdsByType(type) {\n    return api.cachedIds && api.cachedIds[type] ? Promise.resolve(api.cachedIds[type]) : fetch(`${type}stories`);\n}\n\nexport function fetchItem(id) {\n    return fetch(`item/${id}`);\n}\n\nexport function fetchItems(ids) {\n    return Promise.all(ids.map(id => fetchItem(id)));\n}\n\nexport function fetchUser(id) {\n    return fetch(`user/${id}`);\n}\n\nexport function watchList(type, cb) {\n    let first = true;\n    const ref = api.child(`${type}stories`);\n    const handler = snapshot => {\n        if (first) {\n            first = false;\n        } else {\n            cb(snapshot.val());\n        }\n    };\n    ref.on('value', handler);\n    return () => {\n        ref.off('value', handler);\n    };\n}\n","import Firebase from 'firebase/app';\nimport 'firebase/database';\n\nexport default function createAPI({ config, version }) {\n    Firebase.initializeApp(config);\n    return Firebase.database().ref(version);\n}\n","import { fetchUser, fetchItems, fetchIdsByType } from '../../../api';\n\nexport default {\n    // ensure data for rendering given list type\n    FETCH_LIST_DATA: ({ commit, dispatch }, { type }) => {\n        commit('SET_ACTIVE_TYPE', { type });\n        return fetchIdsByType(type)\n            .then(ids => commit('SET_LIST', { type, ids }))\n            .then(() => dispatch('ENSURE_ACTIVE_ITEMS'));\n    },\n\n    // ensure all active items are fetched\n    ENSURE_ACTIVE_ITEMS: ({ dispatch, getters }) => {\n        return dispatch('FETCH_ITEMS', {\n            ids: getters.activeIds,\n        });\n    },\n\n    FETCH_ITEMS: ({ commit, state }, { ids }) => {\n        // on the client, the store itself serves as a cache.\n        // only fetch items that we do not already have, or has expired (3 minutes)\n        const now = Date.now();\n        ids = ids.filter(id => {\n            const item = state.items[id];\n            if (!item) {\n                return true;\n            }\n            if (now - item.__lastUpdated > 1000 * 60 * 3) {\n                return true;\n            }\n            return false;\n        });\n        if (ids.length) return fetchItems(ids).then(items => commit('SET_ITEMS', { items }));\n        return Promise.resolve();\n    },\n\n    FETCH_USER: ({ state, dispatch }, { id }) => {\n        return state.users[id]\n            ? Promise.resolve(state.users[id])\n            : fetchUser(id).then(user => dispatch('SET_USER', { id, user }));\n    },\n\n    SET_USER: ({ commit, state }, { id }) => {\n        return state.users[id]\n            ? Promise.resolve(state.users[id])\n            : fetchUser(id).then(user => commit('SET_USER', { id, user }));\n    },\n};\n","import Vue from 'vue';\n\nexport default {\n    SET_ACTIVE_TYPE: (state, { type }) => {\n        state.activeType = type;\n    },\n\n    SET_LIST: (state, { type, ids }) => {\n        state.lists[type] = ids;\n    },\n\n    SET_ITEMS: (state, { items }) => {\n        items.forEach(item => {\n            if (item) Vue.set(state.items, item.id, item);\n        });\n    },\n\n    SET_USER: (state, { id, user }) => {\n        Vue.set(state.users, id, user || false); /* false means user not found */\n    },\n};\n","export default {\n    // ids of the items that should be currently displayed based on\n    // current list type and current pagination\n    activeIds(state, getters, rootState) {\n        const { activeType, itemsPerPage, lists } = state;\n\n        if (!activeType) {\n            return [];\n        }\n\n        const page = Number(rootState.route.params.page) || 1;\n        const start = (page - 1) * itemsPerPage;\n        const end = page * itemsPerPage;\n\n        return lists[activeType].slice(start, end);\n    },\n\n    // items that should be currently displayed.\n    // this Array may not be fully fetched.\n    activeItems(state, getters) {\n        return getters.activeIds.map(id => state.items[id]).filter(_ => _);\n    },\n};\n","import actions from './actions';\nimport mutations from './mutations';\nimport getters from './getters';\n\n/**\n * Function for create store instance.\n * Функция создания экземпляра стора.\n */\nexport default {\n    name: 'item_list',\n    namespaced: true,\n    state: {\n        activeType: null,\n        itemsPerPage: 20,\n        items: {\n            /* [id: number]: Item */\n        },\n        users: {\n            /* [id: string]: User */\n        },\n        lists: {\n            top: [\n                /* number */\n            ],\n            new: [],\n            show: [],\n            ask: [],\n            job: [],\n        },\n    },\n    actions,\n    mutations,\n    getters,\n};\n"],"sourceRoot":""}